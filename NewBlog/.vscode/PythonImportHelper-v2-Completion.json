[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "obtain_auth_token",
        "importPath": "rest_framework.authtoken.views",
        "description": "rest_framework.authtoken.views",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.views",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "authentication_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "AuthenticationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "Blogs.asgi",
        "description": "Blogs.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "Blogs.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "Blogs.settings",
        "description": "Blogs.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-u&2g$9(rw2y7c(ir=5+-%mz8)okf4ve&f8!wbuo2pgk@5fjqea'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',",
        "detail": "Blogs.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "Blogs.settings",
        "description": "Blogs.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-u&2g$9(rw2y7c(ir=5+-%mz8)okf4ve&f8!wbuo2pgk@5fjqea'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "Blogs.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "Blogs.settings",
        "description": "Blogs.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "Blogs.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "Blogs.settings",
        "description": "Blogs.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'core',",
        "detail": "Blogs.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "Blogs.settings",
        "description": "Blogs.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'core',\n    'rest_framework',\n]",
        "detail": "Blogs.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "Blogs.settings",
        "description": "Blogs.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n'DEFAULT_AUTHENTICATION_CLASSES': (\n    'rest_framework.authentication.TokenAuthentication',\n)}\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',",
        "detail": "Blogs.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "Blogs.settings",
        "description": "Blogs.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'Blogs.urls'",
        "detail": "Blogs.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "Blogs.settings",
        "description": "Blogs.settings",
        "peekOfCode": "ROOT_URLCONF = 'Blogs.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "Blogs.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "Blogs.settings",
        "description": "Blogs.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',",
        "detail": "Blogs.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "Blogs.settings",
        "description": "Blogs.settings",
        "peekOfCode": "WSGI_APPLICATION = 'Blogs.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "Blogs.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "Blogs.settings",
        "description": "Blogs.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "Blogs.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "Blogs.settings",
        "description": "Blogs.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "Blogs.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "Blogs.settings",
        "description": "Blogs.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Blogs.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "Blogs.settings",
        "description": "Blogs.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_REDIRECT_URL = \"/api\"",
        "detail": "Blogs.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "Blogs.settings",
        "description": "Blogs.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_REDIRECT_URL = \"/api\"",
        "detail": "Blogs.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "Blogs.settings",
        "description": "Blogs.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_REDIRECT_URL = \"/api\"",
        "detail": "Blogs.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "Blogs.settings",
        "description": "Blogs.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_REDIRECT_URL = \"/api\"",
        "detail": "Blogs.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "Blogs.settings",
        "description": "Blogs.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_REDIRECT_URL = \"/api\"",
        "detail": "Blogs.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "Blogs.settings",
        "description": "Blogs.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL = \"/api\"",
        "detail": "Blogs.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "Blogs.urls",
        "description": "Blogs.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('',include('core.urls')),\n    #path('',include('accounts.urls')),\n    path(\"accounts/\", include(\"django.contrib.auth.urls\"))\n]",
        "detail": "Blogs.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "Blogs.wsgi",
        "description": "Blogs.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "Blogs.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "core.migrations.0001_initial",
        "description": "core.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Blog',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('Blog_title', models.CharField(max_length=100)),",
        "detail": "core.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "core.migrations.0002_alter_blog_status",
        "description": "core.migrations.0002_alter_blog_status",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='blog',\n            name='Status',\n            field=models.CharField(choices=[('Draft', 'Draft'), ('Published', 'Published')], max_length=100),\n        ),",
        "detail": "core.migrations.0002_alter_blog_status",
        "documentation": {}
    },
    {
        "label": "CoreConfig",
        "kind": 6,
        "importPath": "core.apps",
        "description": "core.apps",
        "peekOfCode": "class CoreConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'core'",
        "detail": "core.apps",
        "documentation": {}
    },
    {
        "label": "Blog",
        "kind": 6,
        "importPath": "core.models",
        "description": "core.models",
        "peekOfCode": "class Blog(models.Model):\n    Blog_title = models.CharField(max_length=100)\n    Content  = models.TextField()\n    Author  = models.CharField(max_length=100)\n    Created_at = models.DateTimeField()\n    Status = models.CharField(choices=Status,max_length=100)\n    def __str__(self):\n        return self.Blog_title",
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "BlogSerializer",
        "kind": 6,
        "importPath": "core.serializers",
        "description": "core.serializers",
        "peekOfCode": "class BlogSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Blog\n        fields ='__all__'",
        "detail": "core.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "core.urls",
        "description": "core.urls",
        "peekOfCode": "urlpatterns = [\n    path('api/', blogview,name='BlogsView'),\n    path('api/<int:id>', BlogById,name='Blogbyid'),\n    #path('/login/', blogview,name='BlogsView')\n    path('', blog_list_view, name='blog_list_view'),\n    #path('blogs/<int:blog_id>/',blog_detail_view, name='blog_detail_view'),\n    #path('', homepage, name='homepage'),\n    path('list/', admin_blog_list_view, name='blog_list'),\n    path('blogs/create/',admin_blog_create_view, name='admin_blog_create'),\n    path('blogs/<int:blog_id>/', admin_blog_detail_view, name='blog_detail'),",
        "detail": "core.urls",
        "documentation": {}
    },
    {
        "label": "signupview",
        "kind": 2,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "def signupview(request):\n    print(\"request Type : \",request.method)\n    print(request.POST.get('username'))\n    print(request.POST.get('password1'))\n    print(request.POST.get('password2'))\n    if request.method =='POST':\n        form = UserCreationForm(request.POST)\n        print(\"Create form\")\n        if form.is_valid():\n            print(\"form is valid\")",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "signinview",
        "kind": 2,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "def signinview(request):\n    if request.method =='POST':\n        form = AuthenticationForm(data = request.POST)\n        if form.is_valid():\n            return redirect('blog_list')\n    else:\n        form = AuthenticationForm()\n    return render(request,'registration/signin.html',{\"form\":form})        \n#@login_required \ndef logoutview(request):",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "logoutview",
        "kind": 2,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "def logoutview(request):\n    logout(request)\n    messages.info(request,\"Logged out Successfully!\")\n    return redirect('homepage')\ndef homepage(request):\n    return render(request,'home.html')\n@api_view(['GET','POST'])",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "homepage",
        "kind": 2,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "def homepage(request):\n    return render(request,'home.html')\n@api_view(['GET','POST'])\ndef blogview(request):\n    if request.method =='GET':\n        queryset = Blog.objects.all()\n        serilize = BlogSerializer(queryset,many=True)\n        return Response(serilize.data)\n    elif request.method =='POST':\n        queryset = BlogSerializer(data = request.data)",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "blogview",
        "kind": 2,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "def blogview(request):\n    if request.method =='GET':\n        queryset = Blog.objects.all()\n        serilize = BlogSerializer(queryset,many=True)\n        return Response(serilize.data)\n    elif request.method =='POST':\n        queryset = BlogSerializer(data = request.data)\n        if queryset.is_valid():\n            queryset.save()\n            return Response(\"Post Successfully\")",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "BlogById",
        "kind": 2,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "def BlogById(request, id):\n    try:\n        blog = Blog.objects.get(id=id)\n    except Blog.DoesNotExist:\n        return Response({\"error\": \"Blog not found.\"}, )\n    if request.method == 'GET':\n        serializer = BlogSerializer(blog)\n        return Response(serializer.data)\n    elif request.method == 'PUT':\n        serializer = BlogSerializer(blog, data=request.data)",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "bloghome",
        "kind": 2,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "def bloghome(request):\n    return render(request, 'home.html')\n#@login_required \ndef blog_list_view(request):\n    response = requests.get(API_BASE_URL)\n    blogs = response.json() if response.status_code == 200 else []\n    return render(request, 'blog_list.html', {'blogs': blogs})\n#@login_required \ndef admin_blog_list_view(request):\n    response = requests.get(API_BASE_URL)",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "blog_list_view",
        "kind": 2,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "def blog_list_view(request):\n    response = requests.get(API_BASE_URL)\n    blogs = response.json() if response.status_code == 200 else []\n    return render(request, 'blog_list.html', {'blogs': blogs})\n#@login_required \ndef admin_blog_list_view(request):\n    response = requests.get(API_BASE_URL)\n    blogs = response.json() if response.status_code == 200 else []\n    return render(request, 'blog_list.html', {'blogs': blogs})\n#@login_required ",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "admin_blog_list_view",
        "kind": 2,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "def admin_blog_list_view(request):\n    response = requests.get(API_BASE_URL)\n    blogs = response.json() if response.status_code == 200 else []\n    return render(request, 'blog_list.html', {'blogs': blogs})\n#@login_required \ndef admin_blog_detail_view(request, blog_id):\n    response = requests.get(f\"{API_BASE_URL}{blog_id}\")  \n    blog = response.json() if response.status_code == 200 else {}\n    print(\"Blog Details:\", blog)\n    return render(request, 'blog_detail.html', {'blog': blog})",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "admin_blog_detail_view",
        "kind": 2,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "def admin_blog_detail_view(request, blog_id):\n    response = requests.get(f\"{API_BASE_URL}{blog_id}\")  \n    blog = response.json() if response.status_code == 200 else {}\n    print(\"Blog Details:\", blog)\n    return render(request, 'blog_detail.html', {'blog': blog})\nfrom datetime import datetime\n#@login_required \ndef admin_blog_create_view(request):\n    if request.method == 'POST':\n        data = {",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "admin_blog_create_view",
        "kind": 2,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "def admin_blog_create_view(request):\n    if request.method == 'POST':\n        data = {\n            'Blog_title': request.POST.get('Blog_title'),\n            'Content': request.POST.get('Content'),\n            'Author': request.POST.get('Author'),\n            'Status': request.POST.get('Status'),\n            'Created_at': datetime.now().isoformat()  \n        }\n        response = requests.post(API_BASE_URL, json=data)",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "admin_blog_update_view",
        "kind": 2,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "def admin_blog_update_view(request, blog_id):\n    response = requests.get(f\"{API_BASE_URL}{blog_id}\")\n    blog = response.json() if response.status_code == 200 else {}\n    if not blog:\n        return render(request, '404.html', status=404)  \n    if request.method == 'POST':\n        data = {\n            'Blog_title': request.POST.get('Blog_title'),\n            'Content': request.POST.get('Content'),\n            'Author': request.POST.get('Author'),",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "admin_blog_delete_view",
        "kind": 2,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "def admin_blog_delete_view(request, blog_id):\n    if request.method == 'POST':\n        response = requests.delete(f\"{API_BASE_URL}{blog_id}\")\n        if response.status_code == 200:\n            messages.success(request, \" Blog deleted successfully.\")\n        else:\n            messages.error(request, f\"⚠️ Failed to delete blog. Status code: {response.status_code}\")\n    return redirect('blog_list')",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "API_BASE_URL",
        "kind": 5,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "API_BASE_URL = 'http://127.0.0.1:8000/api/'\ndef bloghome(request):\n    return render(request, 'home.html')\n#@login_required \ndef blog_list_view(request):\n    response = requests.get(API_BASE_URL)\n    blogs = response.json() if response.status_code == 200 else []\n    return render(request, 'blog_list.html', {'blogs': blogs})\n#@login_required \ndef admin_blog_list_view(request):",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Blogs.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]